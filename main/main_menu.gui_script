function init(self)
	-- Add initialization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
	msg.post(".", "acquire_input_focus")
	msg.post("#", "hide_main_menu")
	self.active = false
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end


function change_player_show(self, newplayer)
	-- change the player image shown in the "progamer_show" to newplayer
	local current_player_node = gui.get_node("progamer_show")
	-- Get name of new player

	-- Get Image of new player

	-- Set the name to new player

	-- Set the Image of new player	
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if message_id == hash("show_main_menu") then
		msg.post("#", "enable")
		self.active = true
	elseif message_id == hash("hide_main_menu") then
		msg.post("#", "disable")
		self.active = false
	elseif message_id == hash("change_show_player") then
		change_player_show(self, message["player"])
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
	if action_id == hash("touch") and action.pressed and self.active then
		local back_to_start = gui.get_node("back_to_start")
		if gui.pick_node(back_to_start, action.x, action.y) then 
			msg.post("#", "hide_main_menu")
			print("back clicked")
			msg.post("#start_menu", "show_start")
		end
		local team = gui.get_node("team_game")
		if gui.pick_node(team, action.x, action.y) then 
			msg.post("#", "hide_main_menu")
			print("team game")
			msg.post("#team_game_select", "show_team_game_select")
		end
		local individual = gui.get_node("individual_game")
		if gui.pick_node(individual, action.x, action.y) then 
			msg.post("#", "hide_main_menu")
			print("individual game")
			msg.post("#not_impl", "show_not_impl")
		end
		local practise = gui.get_node("practise_game")
		if gui.pick_node(practise, action.x, action.y) then 
			msg.post("#", "hide_main_menu")
			print("practise game")
			msg.post("#not_impl", "show_not_impl")
		end
		local next_player = gui.get_node("next_player")
		if gui.pick_node(next_player, action.x, action.y) then 
			print("next player clicked")
			-- change to next player in self's player list
		end
		local last_player = gui.get_node("last_player")
		if gui.pick_node(last_player, action.x, action.y) then 
			print("last player clicked")
			-- change to last player in self's player list

			-- ask for new player info from data controller 
		end
		local current_player = gui.get_node("progamer_show")
		if gui.pick_node(current_player, action.x, action.y) then 
			print("current player clicked")
			-- show current player's info
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
